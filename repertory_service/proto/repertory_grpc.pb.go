// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: repertory.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Repertory_SetRepertory_FullMethodName         = "/proto.repertory/SetRepertory"
	Repertory_GetRepertory_FullMethodName         = "/proto.repertory/GetRepertory"
	Repertory_BatchGetRepertory_FullMethodName    = "/proto.repertory/BatchGetRepertory"
	Repertory_ReduceRepertory_FullMethodName      = "/proto.repertory/ReduceRepertory"
	Repertory_BatchReduceRepertory_FullMethodName = "/proto.repertory/BatchReduceRepertory"
	Repertory_RollBackRepertory_FullMethodName    = "/proto.repertory/RollBackRepertory"
)

// RepertoryClient is the client API for Repertory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepertoryClient interface {
	SetRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*BaseResp, error)
	GetRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*GoodsRepertoryInfo, error)
	BatchGetRepertory(ctx context.Context, in *GoodsListRepertory, opts ...grpc.CallOption) (*GoodsListRepertory, error)
	ReduceRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*GoodsRepertoryInfo, error)
	BatchReduceRepertory(ctx context.Context, in *GoodsListRepertory, opts ...grpc.CallOption) (*GoodsListRepertory, error)
	RollBackRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*GoodsRepertoryInfo, error)
}

type repertoryClient struct {
	cc grpc.ClientConnInterface
}

func NewRepertoryClient(cc grpc.ClientConnInterface) RepertoryClient {
	return &repertoryClient{cc}
}

func (c *repertoryClient) SetRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Repertory_SetRepertory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryClient) GetRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*GoodsRepertoryInfo, error) {
	out := new(GoodsRepertoryInfo)
	err := c.cc.Invoke(ctx, Repertory_GetRepertory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryClient) BatchGetRepertory(ctx context.Context, in *GoodsListRepertory, opts ...grpc.CallOption) (*GoodsListRepertory, error) {
	out := new(GoodsListRepertory)
	err := c.cc.Invoke(ctx, Repertory_BatchGetRepertory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryClient) ReduceRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*GoodsRepertoryInfo, error) {
	out := new(GoodsRepertoryInfo)
	err := c.cc.Invoke(ctx, Repertory_ReduceRepertory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryClient) BatchReduceRepertory(ctx context.Context, in *GoodsListRepertory, opts ...grpc.CallOption) (*GoodsListRepertory, error) {
	out := new(GoodsListRepertory)
	err := c.cc.Invoke(ctx, Repertory_BatchReduceRepertory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repertoryClient) RollBackRepertory(ctx context.Context, in *GoodsRepertoryInfo, opts ...grpc.CallOption) (*GoodsRepertoryInfo, error) {
	out := new(GoodsRepertoryInfo)
	err := c.cc.Invoke(ctx, Repertory_RollBackRepertory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepertoryServer is the server API for Repertory service.
// All implementations must embed UnimplementedRepertoryServer
// for forward compatibility
type RepertoryServer interface {
	SetRepertory(context.Context, *GoodsRepertoryInfo) (*BaseResp, error)
	GetRepertory(context.Context, *GoodsRepertoryInfo) (*GoodsRepertoryInfo, error)
	BatchGetRepertory(context.Context, *GoodsListRepertory) (*GoodsListRepertory, error)
	ReduceRepertory(context.Context, *GoodsRepertoryInfo) (*GoodsRepertoryInfo, error)
	BatchReduceRepertory(context.Context, *GoodsListRepertory) (*GoodsListRepertory, error)
	RollBackRepertory(context.Context, *GoodsRepertoryInfo) (*GoodsRepertoryInfo, error)
	mustEmbedUnimplementedRepertoryServer()
}

// UnimplementedRepertoryServer must be embedded to have forward compatible implementations.
type UnimplementedRepertoryServer struct {
}

func (UnimplementedRepertoryServer) SetRepertory(context.Context, *GoodsRepertoryInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRepertory not implemented")
}
func (UnimplementedRepertoryServer) GetRepertory(context.Context, *GoodsRepertoryInfo) (*GoodsRepertoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepertory not implemented")
}
func (UnimplementedRepertoryServer) BatchGetRepertory(context.Context, *GoodsListRepertory) (*GoodsListRepertory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetRepertory not implemented")
}
func (UnimplementedRepertoryServer) ReduceRepertory(context.Context, *GoodsRepertoryInfo) (*GoodsRepertoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceRepertory not implemented")
}
func (UnimplementedRepertoryServer) BatchReduceRepertory(context.Context, *GoodsListRepertory) (*GoodsListRepertory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchReduceRepertory not implemented")
}
func (UnimplementedRepertoryServer) RollBackRepertory(context.Context, *GoodsRepertoryInfo) (*GoodsRepertoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBackRepertory not implemented")
}
func (UnimplementedRepertoryServer) mustEmbedUnimplementedRepertoryServer() {}

// UnsafeRepertoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepertoryServer will
// result in compilation errors.
type UnsafeRepertoryServer interface {
	mustEmbedUnimplementedRepertoryServer()
}

func RegisterRepertoryServer(s grpc.ServiceRegistrar, srv RepertoryServer) {
	s.RegisterService(&Repertory_ServiceDesc, srv)
}

func _Repertory_SetRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRepertoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServer).SetRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repertory_SetRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServer).SetRepertory(ctx, req.(*GoodsRepertoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repertory_GetRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRepertoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServer).GetRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repertory_GetRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServer).GetRepertory(ctx, req.(*GoodsRepertoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repertory_BatchGetRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListRepertory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServer).BatchGetRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repertory_BatchGetRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServer).BatchGetRepertory(ctx, req.(*GoodsListRepertory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repertory_ReduceRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRepertoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServer).ReduceRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repertory_ReduceRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServer).ReduceRepertory(ctx, req.(*GoodsRepertoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repertory_BatchReduceRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListRepertory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServer).BatchReduceRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repertory_BatchReduceRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServer).BatchReduceRepertory(ctx, req.(*GoodsListRepertory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repertory_RollBackRepertory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRepertoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepertoryServer).RollBackRepertory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Repertory_RollBackRepertory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepertoryServer).RollBackRepertory(ctx, req.(*GoodsRepertoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Repertory_ServiceDesc is the grpc.ServiceDesc for Repertory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Repertory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.repertory",
	HandlerType: (*RepertoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRepertory",
			Handler:    _Repertory_SetRepertory_Handler,
		},
		{
			MethodName: "GetRepertory",
			Handler:    _Repertory_GetRepertory_Handler,
		},
		{
			MethodName: "BatchGetRepertory",
			Handler:    _Repertory_BatchGetRepertory_Handler,
		},
		{
			MethodName: "ReduceRepertory",
			Handler:    _Repertory_ReduceRepertory_Handler,
		},
		{
			MethodName: "BatchReduceRepertory",
			Handler:    _Repertory_BatchReduceRepertory_Handler,
		},
		{
			MethodName: "RollBackRepertory",
			Handler:    _Repertory_RollBackRepertory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repertory.proto",
}
